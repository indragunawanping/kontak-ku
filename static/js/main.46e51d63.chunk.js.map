{"version":3,"sources":["modals/UpdateContactModal.module.css","Containers/ErrorModalContainer.module.css","Assets/kontak-ku-logo.webp","Components/ContactDetailPage.module.css","state.ts","common/LoadingComponent.tsx","Components/HomePage.tsx","actionsHttp.ts","actionsContact.ts","actions.ts","modals/UpdateContactModal.tsx","Containers/HomePageContainer.tsx","Containers/ErrorModalContainer.tsx","Components/ContactDetailPage.tsx","Containers/ContactDetailPageContainer.tsx","Components/App.tsx","serviceWorker.js","initialStates.ts","reducers.ts","index.tsx","Components/HomePage.module.css"],"names":["module","exports","HttpCallMethod","HttpCallStatus","LoadingComponent","Loader","active","inline","HomePage","props","className","styles","ContactContainer","Image","src","logo","Logo","List","selection","divided","verticalAlign","ContactList","size","isFetchingContact","LoadingHomePage","contactList","contacts","length","contact","push","Item","onClick","handleContactClick","id","key","avatar","photo","Content","Name","Header","firstName","lastName","NoContact","renderContactList","Button","circular","color","icon","Float","handleAddButtonClick","updateHttpCallStatus","callId","newStatus","type","payload","status","addNewHttpCall","httpCall","sendHttpRequest","nextAction","errorAction","doHttpCall","then","response","ok","onSuccessful","catch","onFailed","configuration","method","credentials","undefined","headers","Object","assign","POST","PUT","requestBody","body","fetch","url","processResponse","failedAction","updateErrorModalStatus","errorModal","updateFetchingContactStatus","updateStoringContactStatus","isStoringContact","updateFetchingContactDetailStatus","isFetchingContactDetail","updateUpdatingContactStatus","isUpdatingContact","updateDeletingContactDetailStatus","isDeletingContact","fetchContactList","dispatch","newCallId","uuid","GET","REACT_APP_APPLICATION_BASE_URL","errorModalStatus","isOpen","title","json","data","SUCCESSFUL","ERROR","content","message","error","httpCallSent","SENT","fetchContactDetail","contactId","UpdateContactModal","Modal","open","updateContactModalOpen","updateActionType","Form","Input","fluid","label","placeholder","value","onChange","handleFirstNameChange","handleLastNameChange","min","age","handleAgeChange","photoUrl","handlePhotoUrlChange","ErrorMessage","errorMessage","Actions","handleCancelButtonClick","CancelButton","handleUpdateContactButtonClick","AddButton","loading","connect","state","session","useDispatch","useState","isAddContactModalOpen","setIsAddContactModalOpen","setFirstName","setLastName","setAge","setPhotoUrl","setErrorMessage","useEffect","history","useHistory","handleAddContactButtonClick","useCallback","test","JSON","stringify","storingContact","Fragment","concat","event","currentTarget","Number","control","handleCloseErrorModal","onClose","ErrorModal","negative","ContactDetailPage","ContactDetail","currentContact","Age","Buttons","handleButtonBackClick","HandleButtonEditClick","handleButtonDeleteClick","contactIdParam","match","params","isEditContactModalOpen","setIsEditContactModalOpen","handleEditContactButtonClick","editContact","succesfulRedirection","DELETE","deleteContact","App","exact","path","component","HomePageContainer","ContactDetailPageContainer","Boolean","window","location","hostname","initialDataState","initialCommunicationState","httpCalls","initialControlState","successfulModal","initialSessionState","reducers","combineReducers","action","communication","httpCallIndex","findIndex","x","newHttpCall","slice","logger","createLogger","level","collapsed","diff","middleware","composeWithDevTools","composeEnhancers","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,aAAe,yCAAyC,aAAe,yCAAyC,UAAY,wC,oBCA9ID,EAAOC,QAAU,CAAC,WAAa,wCAAwC,OAAS,sC,oBCDhFD,EAAOC,QAAU,IAA0B,6C,qGCC3CD,EAAOC,QAAU,CAAC,iBAAmB,4CAA4C,cAAgB,yCAAyC,KAAO,gCAAgC,KAAO,gCAAgC,IAAM,+BAA+B,QAAU,qC,4CC+C3PC,EAWAC,E,gJClDGC,EANU,WACvB,OACE,kBAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,cCsDXC,EA7C2B,SAACC,GA0BzC,OACE,yBAAKC,UAAWC,IAAOC,kBACrB,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAAML,UAAWC,IAAOK,OACpC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,SAAO,EAACC,cAAc,SAASV,UAAWC,IAAOU,YAAaC,KAAK,OAE/Eb,EAAMc,kBACJ,yBAAKb,UAAWC,IAAOa,iBACrB,kBAAC,EAAD,OAhCc,WACxB,IAAIC,EAA6B,GAEjC,GAAIhB,EAAMiB,SAASC,OAAS,EAAG,CAAC,IAAD,gBACPlB,EAAMiB,UADC,yBAClBE,EADkB,QAE3BH,EAAYI,KACV,kBAACZ,EAAA,EAAKa,KAAN,CAAWC,QAAS,kBAAMtB,EAAMuB,mBAAmBJ,EAAQK,KAAKC,IAAKN,EAAQK,IAC3E,kBAACpB,EAAA,EAAD,CAAOsB,QAAM,EAACrB,IAAKc,EAAQQ,QAC3B,kBAACnB,EAAA,EAAKoB,QAAN,CAAc3B,UAAWC,IAAO2B,MAC9B,kBAACrB,EAAA,EAAKsB,OAAN,KAAcX,EAAQY,UAAtB,IAAkCZ,EAAQa,cALlD,2BAAuC,IADV,oCAY7BhB,EAAYI,KACV,yBAAKnB,UAAWC,IAAO+B,UAAWR,IAAK,cAAvC,oBAMJ,OAAOT,EAaCkB,IAGN,kBAACC,EAAA,EAAD,CAAQtB,KAAK,MAAMuB,UAAQ,EAACC,MAAM,SAASC,KAAK,WAAWrC,UAAWC,IAAOqC,MACrEjB,QAAStB,EAAMwC,yB,mBFNjB/C,K,YAAAA,E,UAAAA,E,UAAAA,E,iBAAAA,M,cAWAC,K,YAAAA,E,wBAAAA,E,eAAAA,M,KGzDL,IAGM+C,EAAuB,SAACC,EAAyBC,GAC5D,MAAO,CACLC,KAJmC,0BAIJC,QAAS,CACtCH,OAAQA,EACRI,OAAQH,KAKDI,EAAiB,SAACC,GAC7B,MAAO,CACLJ,KAd6B,oBAcJC,QAASG,IAIzBC,EAAkB,SAACD,EACAE,EACAC,GAC9BC,EAAWJ,GACRK,MAAK,SAACC,GACL,IAAKA,EAASC,IAAMJ,EAClB,MAAMG,EAER,OAAOA,KAERD,KAAKG,EAAaN,IAClBO,MAAMC,EAASP,KAGdC,EAAa,SAACJ,GAClB,IAAIW,EAAgB,CAClBC,OAAQZ,EAASY,OACjBC,YAAab,EAASa,YAAcb,EAASa,iBAAcC,GAY7D,OAVId,EAASe,UACXJ,EAAgBK,OAAOC,OAAO,GAAIN,EAAe,CAC/CI,QAASf,EAASe,WAGjBf,EAASY,SAAWnE,EAAeyE,MAAQlB,EAASY,SAAWnE,EAAe0E,MAAQnB,EAASoB,cAClGT,EAAgBK,OAAOC,OAAO,GAAIN,EAAe,CAC/CU,KAAMrB,EAASoB,eAGZE,MAAMtB,EAASuB,IAAKZ,IAGvBH,EAAe,SAACgB,GACpB,OAAO,SAAClB,GACNkB,EAAgBlB,KAIdI,EAAW,SAACe,GAChB,OAAO,SAACnB,GACN,IAAImB,EAGF,MAAMnB,EAFNmB,EAAanB,KC5CNoB,EAAyB,SAACC,GACrC,MAAO,CAAE/B,KChBuB,qBDgBGC,QAAS8B,IAWjCC,EAA8B,SAAC9D,GAC1C,MAAO,CACL8B,KApB0C,iCAoBJC,QAAS/B,IAItC+D,EAA6B,SAACC,GACzC,MAAO,CACLlC,KAzByC,gCAyBJC,QAASiC,IAIrCC,EAAoC,SAACC,GAChD,MAAO,CACLpC,KA9BiD,wCA8BJC,QAASmC,IAI7CC,EAA8B,SAACC,GAC1C,MAAO,CACLtC,KAnC0C,iCAmCJC,QAASqC,IAItCC,EAAoC,SAACC,GAChD,MAAO,CACLxC,KAxC0C,iCAwCJC,QAASuC,IAItCC,EAAmB,WAC9B,OAAO,SAACC,GACN,IACMC,EAAYC,MACZxC,EAAqB,CACzBxB,GAAI+D,EACJ3B,OAAQnE,EAAegG,IACvBlB,IALUmB,oDAMV3B,QAAS,CACP,eAAgB,qBAIhB4B,EAAoC,CACtCC,QAAQ,EACRC,MAAO,oCAsCTP,EAASV,GAA4B,IACrC3B,EAAgBD,GApCS,SAACM,GACpBA,EAASe,MACXf,EAASwC,OACNzC,MAAK,SAAC0C,GACLT,EAAS7C,EAAqB8C,EAAW7F,EAAesG,aACxDV,EA5DH,CAAE1C,KAdwB,sBAcGC,QA4DFkD,EAAKA,OAC7BT,EAASV,GAA4B,UAKxB,SAACtB,GACpBgC,EAAS7C,EAAqB8C,EAAW7F,EAAeuG,QACpD3C,EAASe,KACXf,EAASwC,OACNzC,MAAK,SAAC0C,GACLJ,EAAiBO,QAAUH,EAAKI,QAChCb,EAASV,GAA4B,IACrCU,EAASZ,EAAuBiB,OAGjClC,OAAM,SAAC2C,GACNT,EAAiBO,QAAUE,EAAMD,QACjCb,EAASV,GAA4B,IACrCU,EAASZ,EAAuBiB,OAIpCA,EAAiBO,QAAU,6DAE7BZ,EAASV,GAA4B,IACjCe,EAAiBO,SACnBZ,EAASZ,EAAuBiB,OAKpC,IAAMU,EAAerC,OAAOC,OAAO,GAAIjB,EAAU,CAC/CF,OAAQpD,EAAe4G,OAEzBhB,EAASvC,EAAesD,MAyEfE,EAAqB,SAACC,GACjC,OAAO,SAAClB,GACN,IAAMf,EAAMmB,qDAA8Cc,EACpDjB,EAAYC,MAEZxC,EAAqB,CACzBxB,GAAI+D,EACJ3B,OAAQnE,EAAegG,IACvBlB,IAAKA,EACLR,QAAS,CACP,eAAgB,qBAIhB4B,EAAoC,CACtCC,QAAQ,EACRC,MAAO,sCAsCTP,EAASP,GAAkC,IAC3C9B,EAAgBD,GApCS,SAACM,GACpBA,EAASe,MACXf,EAASwC,OACNzC,MAAK,SAAC0C,GACLT,EA3LH,CAAE1C,KAjB2B,yBAiBGC,QA2LCkD,EAAKA,OACnCT,EAAS7C,EAAqB8C,EAAW7F,EAAesG,aACxDV,EAASP,GAAkC,UAK9B,SAACzB,GACpBgC,EAAS7C,EAAqB8C,EAAW7F,EAAeuG,QACpD3C,EAASe,KACXf,EAASwC,OACNzC,MAAK,SAAC0C,GACLJ,EAAiBO,QAAUH,EAAKI,QAChCb,EAASP,GAAkC,IAC3CO,EAASZ,EAAuBiB,OAGjClC,OAAM,SAAC2C,GACNT,EAAiBO,QAAUE,EAAMD,QACjCb,EAASP,GAAkC,IAC3CO,EAASZ,EAAuBiB,OAIpCA,EAAiBO,QAAU,+DAE7BZ,EAASP,GAAkC,IACvCY,EAAiBO,SACnBZ,EAASZ,EAAuBiB,OAKpC,IAAMU,EAAerC,OAAOC,OAAO,GAAIjB,EAAU,CAC/CF,OAAQpD,EAAe4G,OAEzBhB,EAASvC,EAAesD,M,4CEjLbI,EAnD4C,SAACzG,GAC1D,OACE,kBAAC0G,EAAA,EAAD,CAAOC,KAAM3G,EAAM4G,uBAAwB/F,KAAK,QAC9C,kBAAC6F,EAAA,EAAM5E,OAAP,KACG9B,EAAM6G,iBADT,gBAGA,kBAACH,EAAA,EAAM9E,QAAP,KACE,kBAACkF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,OAAK,EACLC,MAAM,aACNC,YAAY,aACZC,MAAOnH,EAAM+B,UACbqF,SAAUpH,EAAMqH,wBAE5B,kBAACP,EAAA,EAAKC,MAAN,CAAYC,OAAK,EACLC,MAAM,YACNC,YAAY,YACZC,MAAOnH,EAAMgC,SACboF,SAAUpH,EAAMsH,uBAE5B,kBAACR,EAAA,EAAKC,MAAN,CAAYC,OAAK,EACLC,MAAM,MACNC,YAAY,MACZtE,KAAK,SACL2E,IAAI,IACJJ,MAAOnH,EAAMwH,IACbJ,SAAUpH,EAAMyH,kBAE5B,kBAACX,EAAA,EAAKC,MAAN,CAAYC,OAAK,EACLC,MAAM,cACNC,YAAY,YACZC,MAAOnH,EAAM0H,SACbN,SAAUpH,EAAM2H,uBAE5B,0BAAM1H,UAAWC,IAAO0H,cAAe5H,EAAM6H,gBAIjD,kBAACnB,EAAA,EAAMoB,QAAP,KACE,kBAAC3F,EAAA,EAAD,CAAQE,MAAM,MAAMf,QAAStB,EAAM+H,wBAAyB9H,UAAWC,IAAO8H,cAA9E,UAGA,kBAAC7F,EAAA,EAAD,CAAQE,MAAM,SAASf,QAAStB,EAAMiI,+BAAgChI,UAAWC,IAAOgI,UAChFC,QAASnI,EAAMkF,mBACpBlF,EAAM6G,qBCsDFuB,eA/GS,SAACC,GACvB,MAAO,CACLpH,SAAUoH,EAAMtC,KAAK9E,SACrBH,kBAAmBuH,EAAMC,QAAQxH,kBACjCgE,iBAAkBuD,EAAMC,QAAQxD,oBA2GrBsD,EAjG6C,SAACpI,GAC3D,IAAMsF,EAAWiD,cAEXtH,EAAWjB,EAAMiB,SACjBH,EAAoBd,EAAMc,kBAC1BgE,EAAmB9E,EAAM8E,iBAL8D,EAOnC0D,oBAAS,GAP0B,mBAOtFC,EAPsF,KAO/DC,EAP+D,OAQ3DF,mBAAS,IARkD,mBAQtFzG,EARsF,KAQ3E4G,EAR2E,OAS7DH,mBAAS,IAToD,mBAStFxG,EATsF,KAS5E4G,EAT4E,OAUvEJ,mBAAS,GAV8D,mBAUtFhB,EAVsF,KAUjFqB,EAViF,OAW7DL,mBAAS,IAXoD,mBAWtFd,EAXsF,KAW5EoB,EAX4E,OAYrDN,mBAAS,IAZ4C,mBAYtFX,EAZsF,KAYxEkB,EAZwE,KAc7FC,qBAAU,WACR1D,EAASD,OACR,CAACC,IAEJ,IAgBM2D,EAAUC,cAYVC,EAA8BC,uBAClC,WACMrH,EAAUb,OAAS,EACrB6H,EAAgB,yDACP/G,EAASd,OAAS,EAC3B6H,EAAgB,wDACL,oCAAoCM,KAAKtH,GAEzC,oCAAoCsH,KAAKrH,GAE3CwF,EAAM,GAAKA,EAAM,IAC1BuB,EAAgB,mDACa,IAApBrB,EAASxG,OAClB6H,EAAgB,4CAEhBzD,EHsCsB,SAACvD,EAAmBC,EAAkBwF,EAAaE,GAC/E,OAAO,SAACpC,GACN,IACMC,EAAYC,MAEZxC,EAAqB,CACzBxB,GAAI+D,EACJ3B,OAAQnE,EAAeyE,KACvBK,IANUmB,oDAOV3B,QAAS,CACP,eAAgB,oBAElBK,YAAakF,KAAKC,UAAU,CAC1B,UAAaxH,EACb,SAAYC,EACZ,IAAOwF,EACP,MAASE,KAIT/B,EAAoC,CACtCC,QAAQ,EACRC,MAAO,4BAsCTP,EAAST,GAA2B,IACpC5B,EAAgBD,GApCS,SAACM,GACpBA,EAASe,MACXf,EAASwC,OACNzC,MAAK,WACJiC,EAASD,KACTC,EAAS7C,EAAqB8C,EAAW7F,EAAesG,aACxDV,EAAST,GAA2B,UAKvB,SAACvB,GACpBgC,EAAS7C,EAAqB8C,EAAW7F,EAAeuG,QACpD3C,EAASe,KACXf,EAASwC,OACNzC,MAAK,SAAC0C,GACLJ,EAAiBO,QAAUH,EAAKI,QAChCb,EAAST,GAA2B,IACpCS,EAASZ,EAAuBiB,OAGjClC,OAAM,SAAC2C,GACNT,EAAiBO,QAAUE,EAAMD,QACjCb,EAAST,GAA2B,IACpCS,EAASZ,EAAuBiB,OAIpCA,EAAiBO,QAAU,wDAE7BZ,EAAST,GAA2B,IAChCc,EAAiBO,SACnBZ,EAASZ,EAAuBiB,OAKpC,IAAMU,EAAerC,OAAOC,OAAO,GAAIjB,EAAU,CAC/CF,OAAQpD,EAAe4G,OAEzBhB,EAASvC,EAAesD,KGvGXmD,CAAezH,EAAWC,EAAUwF,EAAKE,IAClDgB,GAAyB,IAPzBK,EAAgB,yDAFhBA,EAAgB,4DAYpB,CAACzD,EAAUvD,EAAWC,EAAUwF,EAAKE,IAOvC,OACE,kBAAC,IAAM+B,SAAP,KACE,kBAAC,EAAD,CAAUxI,SAAUA,EACVH,kBAAmBA,EACnBS,mBAxCa,SAACiF,GACtBA,GACFyC,EAAQ7H,KAAK,IAAIsI,OAAOlD,KAuCdhE,qBAnCe,WAC3BkG,GAAyB,MAoCvB,kBAAC,EAAD,CAAoB9B,uBAAwB6B,EACxB5B,iBAAkB,MAClB9E,UAAWA,EACXC,SAAUA,EACVwF,IAAKA,EACLE,SAAUA,EACVG,aAAcA,EACd3C,kBAAmBJ,EACnBuC,sBArEM,SAACsC,GAC7BhB,EAAagB,EAAMC,cAAczC,QAqEXG,qBAlEK,SAACqC,GAC5Bf,EAAYe,EAAMC,cAAczC,QAkEVM,gBA/DA,SAACkC,GACvBd,EAAOgB,OAAOF,EAAMC,cAAczC,SA+DZQ,qBA5DK,SAACgC,GAC5Bb,EAAYa,EAAMC,cAAczC,QA4DVY,wBAvBQ,WAC9BW,GAAyB,IAuBHT,+BAAgCkB,Q,2BC7D3Cf,eAtCS,SAACC,GACvB,MAAO,CACLzC,OAAQyC,EAAMyB,QAAQnF,WAAWiB,OACjCC,MAAOwC,EAAMyB,QAAQnF,WAAWkB,MAChCK,QAASmC,EAAMyB,QAAQnF,WAAWuB,WAkCvBkC,EA9BwC,SAACpI,GACtD,IAAM+J,EAAwB,WAC5B/J,EAAMsF,SHpBD,CAAE1C,KAHuB,qBAGGC,QGoBK,CACpCgD,MAAO,GACPK,QAAS,GACTN,QAAQ,MAIZ,OACE,kBAACc,EAAA,EAAD,CACEC,KAAM3G,EAAM4F,OACZoE,QAASD,EACTlJ,KAAK,QACLZ,UAAWC,IAAO+J,YAElB,kBAACnI,EAAA,EAAD,CAAQQ,KAAK,QAAQ4D,QAASlG,EAAM6F,MAAQ7F,EAAM6F,MAAQ,QAAS5F,UAAWC,IAAO4B,SACrF,kBAAC4E,EAAA,EAAM9E,QAAP,KACG5B,EAAMkG,QAAUlG,EAAMkG,QAAU,0FAEnC,kBAACQ,EAAA,EAAMoB,QAAP,KACE,kBAAC3F,EAAA,EAAD,CAAQ+H,UAAQ,EAAC5I,QAASyI,GAA1B,c,iBCPOI,EAtB6C,SAACnK,GAC3D,OACE,yBAAKC,UAAWC,IAAOC,kBAEnBH,EAAMgF,wBACJ,kBAAC,EAAD,MAEA,yBAAK/E,UAAWC,IAAOkK,eACrB,kBAAChK,EAAA,EAAD,CAAOC,IAAKL,EAAMqK,eAAe1I,MAAO1B,UAAWC,IAAOK,OAC1D,0BAAMN,UAAWC,IAAO2B,MAAO7B,EAAMqK,eAAetI,UAAU2H,OAAO,KAAKA,OAAO1J,EAAMqK,eAAerI,WACtG,0BAAM/B,UAAWC,IAAOoK,KAAMtK,EAAMqK,eAAe7C,IAAnD,cACA,yBAAKvH,UAAWC,IAAOqK,SACrB,kBAACpI,EAAA,EAAD,CAAQtB,KAAK,MAAMZ,UAAWC,IAAOiC,OAAQE,MAAM,OAAOD,UAAQ,EAACE,KAAK,eAAehB,QAAStB,EAAMwK,wBACtG,kBAACrI,EAAA,EAAD,CAAQtB,KAAK,MAAMZ,UAAWC,IAAOiC,OAAQE,MAAM,SAASD,UAAQ,EAACE,KAAK,OAAOhB,QAAStB,EAAMyK,wBAChG,kBAACtI,EAAA,EAAD,CAAQgG,QAASnI,EAAMoF,kBAAmBvE,KAAK,MAAMZ,UAAWC,IAAOiC,OAAQE,MAAM,MAAMD,UAAQ,EAACE,KAAK,QAAQhB,QAAStB,EAAM0K,8BCmH/HtC,eAxIS,SAACC,GACvB,MAAO,CACLgC,eAAgBhC,EAAMyB,QAAQO,eAC9BrF,wBAAyBqD,EAAMC,QAAQtD,wBACvCE,kBAAmBmD,EAAMC,QAAQpD,kBACjCE,kBAAmBiD,EAAMC,QAAQlD,qBAmItBgD,EAxH+D,SAACpI,GAC7E,IAAMsF,EAAWiD,cACXU,EAAUC,cAGVyB,EADY3K,EAAM4K,MAAMC,OACGrE,UAE3B6D,EAAiBrK,EAAMqK,eACvBrF,EAA0BhF,EAAMgF,wBAChCE,EAAoBlF,EAAMkF,kBAC1BE,EAAoBpF,EAAMoF,kBAVwF,EAY5DoD,oBAAS,GAZmD,mBAYjHsC,EAZiH,KAYzFC,EAZyF,OAatFvC,mBAAS,IAb6E,mBAajHzG,EAbiH,KAatG4G,EAbsG,OAcxFH,mBAAS,IAd+E,mBAcjHxG,EAdiH,KAcvG4G,EAduG,OAelGJ,mBAAS,GAfyF,mBAejHhB,EAfiH,KAe5GqB,EAf4G,OAgBxFL,mBAAS,IAhB+E,mBAgBjHd,EAhBiH,KAgBvGoB,EAhBuG,OAiBhFN,mBAAS,IAjBuE,mBAiBjHX,EAjBiH,KAiBnGkB,EAjBmG,KAmBxHC,qBAAU,WACR1D,EAASiB,EAAmBoE,MAC3B,CAACrF,EAAUqF,IAEd3B,qBAAU,WACRL,EAAa0B,EAAetI,WAC5B6G,EAAYyB,EAAerI,UAC3B6G,EAAOwB,EAAe7C,KACtBsB,EAAYuB,EAAe1I,SAC1B,CAAC0I,IAEJ,IAwBMW,EAA+B5B,uBACnC,WACMrH,EAAUb,OAAS,EACrB6H,EAAgB,yDACP/G,EAASd,OAAS,EAC3B6H,EAAgB,wDACL,oCAAoCM,KAAKtH,GAEzC,oCAAoCsH,KAAKrH,GAE3CwF,EAAM,GAAKA,EAAM,IAC1BuB,EAAgB,kDACa,IAApBrB,EAASxG,OAClB6H,EAAgB,4CAEhBzD,ENgKmB,SAACkB,EAAmBzE,EAAmBC,EAAkBwF,EAAaE,GAC/F,OAAO,SAACpC,GACN,IAAMf,EAAMmB,qDAA8Cc,EACpDjB,EAAYC,MAEZxC,EAAqB,CACzBxB,GAAI+D,EACJ3B,OAAQnE,EAAe0E,IACvBI,IAAKA,EACLR,QAAS,CACP,eAAgB,oBAElBK,YAAakF,KAAKC,UAAU,CAC1B,UAAaxH,EACb,SAAYC,EACZ,IAAOwF,EACP,MAASE,KAIT/B,EAAoC,CACtCC,QAAQ,EACRC,MAAO,2BAsCTP,EAASL,GAA4B,IACrChC,EAAgBD,GApCS,SAACM,GACpBA,EAASe,MACXf,EAASwC,OACNzC,MAAK,WACJiC,EAASiB,EAAmBC,IAC5BlB,EAAS7C,EAAqB8C,EAAW7F,EAAesG,aACxDV,EAASL,GAA4B,UAKxB,SAAC3B,GACpBgC,EAAS7C,EAAqB8C,EAAW7F,EAAeuG,QACpD3C,EAASe,KACXf,EAASwC,OACNzC,MAAK,SAAC0C,GACLJ,EAAiBO,QAAUH,EAAKI,QAChCb,EAASL,GAA4B,IACrCK,EAASZ,EAAuBiB,OAGjClC,OAAM,SAAC2C,GACNT,EAAiBO,QAAUE,EAAMD,QACjCb,EAASL,GAA4B,IACrCK,EAASZ,EAAuBiB,OAIpCA,EAAiBO,QAAU,oDAE7BZ,EAASL,GAA4B,IACjCU,EAAiBO,SACnBZ,EAASZ,EAAuBiB,OAKpC,IAAMU,EAAerC,OAAOC,OAAO,GAAIjB,EAAU,CAC/CF,OAAQpD,EAAe4G,OAEzBhB,EAASvC,EAAesD,KMjOX4E,CAAYN,EAAgB5I,EAAWC,EAAUwF,EAAKE,IAC/DqD,GAA0B,IAP1BhC,EAAgB,yDAFhBA,EAAgB,4DAYpB,CAACzD,EAAUvD,EAAWC,EAAUwF,EAAKE,EAAUiD,IAO3CO,EAAuB9B,uBAC3B,WACEH,EAAQ7H,KAAK,OACZ,CAAC6H,IAGAyB,EAA0BtB,uBAC9B,WACE9D,ENkNuB,SAACkB,EAAmB0E,GAC/C,OAAO,SAAC5F,GACN,IAAMf,EAAMmB,qDAA8Cc,EACpDjB,EAAYC,MAEZxC,EAAqB,CACzBxB,GAAI+D,EACJ3B,OAAQnE,EAAe0L,OACvB5G,IAAKA,EACLR,QAAS,CACP,eAAgB,qBAIhB4B,EAAoC,CACtCC,QAAQ,EACRC,MAAO,6BA2CTP,EAASH,GAAkC,IAC3ClC,EAAgBD,GAzCS,SAACM,GACpBA,EAASe,MACXf,EAASwC,OACNzC,MAAK,WACJiC,EAAS7C,EAAqB8C,EAAW7F,EAAesG,aACxDV,EAASH,GAAkC,IACvC+F,GACFA,UAMW,SAAC5H,GACpBgC,EAAS7C,EAAqB8C,EAAW7F,EAAeuG,QACpD3C,EAASe,KACXf,EAASwC,OACNzC,MAAK,SAAC0C,GACLJ,EAAiBO,QAAUH,EAAKI,QAChCb,EAASH,GAAkC,IAC3CG,EAASZ,EAAuBiB,OAGjClC,OAAM,SAAC2C,GACNT,EAAiBO,QAAUE,EAAMD,QACjCb,EAASH,GAAkC,IAC3CG,EAASZ,EAAuBiB,OAIpCA,EAAiBO,QAAU,sDAE7BZ,EAASH,GAAkC,IACvCQ,EAAiBO,SACnBZ,EAASZ,EAAuBiB,IAE9BuF,GACFA,OAKJ,IAAM7E,EAAerC,OAAOC,OAAO,GAAIjB,EAAU,CAC/CF,OAAQpD,EAAe4G,OAEzBhB,EAASvC,EAAesD,KMlRb+E,CAAcT,EAAgBO,MACtC,CAAC5F,EAAUqF,EAAgBO,IAGhC,OACE,kBAAC,IAAMzB,SAAP,KACE,kBAAC,EAAD,CAAmBY,eAAgBA,EAChBrF,wBAAyBA,EACzBI,kBAAmBA,EACnBoF,sBAnEO,WAC5BvB,EAAQ7H,KAAK,MAmEQqJ,sBAhEO,WAC5BM,GAA0B,IAgELL,wBAAyBA,IAE5C,kBAAC,EAAD,CAAoB9D,uBAAwBkE,EACxBjE,iBAAkB,OAClB9E,UAAWA,EACXC,SAAUA,EACVwF,IAAKA,EACLE,SAAUA,EACVG,aAAcA,EACd3C,kBAAmBA,EACnBmC,sBAvEM,SAACsC,GAC7BhB,EAAagB,EAAMC,cAAczC,QAuEXG,qBApEK,SAACqC,GAC5Bf,EAAYe,EAAMC,cAAczC,QAoEVM,gBAjEA,SAACkC,GACvBd,EAAOgB,OAAOF,EAAMC,cAAczC,SAiEZQ,qBA9DK,SAACgC,GAC5Bb,EAAYa,EAAMC,cAAczC,QA8DVY,wBArCQ,WAC9BgD,GAA0B,IAqCJ9C,+BAAgC+C,IArBtD,QClGWK,MAZf,WACE,OACE,kBAAC,IAAM5B,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,cAAcC,UAAWE,KAE7C,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2D,gCChBOmB,GAA8B,CACzC9K,SAAU,IAGC+K,GAAgD,CAC3DC,UAAW,IAGAC,GAAoC,CAC/C7B,eAAgB,CACd7I,GAAI,GACJO,UAAW,GACXC,SAAU,GACVwF,IAAK,EACL7F,MAAO,IAETgD,WAAY,CACViB,QAAQ,GAEVuG,gBAAiB,CACfvG,QAAQ,EACRC,MAAO,GACPK,QAAS,KAIAkG,GAAoC,CAC/CtL,mBAAmB,EACnBgE,kBAAkB,EAClBI,mBAAmB,EACnBE,mBAAmB,EACnBJ,yBAAyB,GC4DdqH,GAAWC,0BAAuB,CAC7CvG,KAvFyB,WAAuD,IAAtDsC,EAAqD,uDAAlC0D,GAAkBQ,EAAgB,uCAC/E,OAAQA,EAAO3J,MACb,IVD+B,sBUE7B,OAAOoB,OAAOC,OAAO,GAAIoE,EAAO,CAC9BpH,SAAUsL,EAAO1J,UAErB,QACE,OAAOwF,IAiFXyB,QA7E4B,WAA6D,IAA5DzB,EAA2D,uDAArC6D,GAAqBK,EAAgB,uCACxF,OAAQA,EAAO3J,MACb,ITlB8B,qBSmB5B,OAAOoB,OAAOC,OAAO,GAAIoE,EAAO,CAC9B1D,WAAY4H,EAAO1J,UAEvB,IVfkC,yBUgBhC,OAAOmB,OAAOC,OAAO,GAAIoE,EAAO,CAC9BgC,eAAgBkC,EAAO1J,UAE3B,QACE,OAAOwF,IAmEXC,QA/D4B,WAA6D,IAA5DD,EAA2D,uDAArC+D,GAAqBG,EAAgB,uCACxF,OAAQA,EAAO3J,MACb,IVxB0C,iCUyBxC,OAAOoB,OAAOC,OAAO,GAAIoE,EAAO,CAC9BvH,kBAAmByL,EAAO1J,UAE9B,IV3ByC,gCU4BvC,OAAOmB,OAAOC,OAAO,GAAIoE,EAAO,CAC9BvD,iBAAkByH,EAAO1J,UAE7B,IV9BiD,wCU+B/C,OAAOmB,OAAOC,OAAO,GAAIoE,EAAO,CAC9BrD,wBAAyBuH,EAAO1J,UAEpC,IVjC0C,iCUkCxC,OAAOmB,OAAOC,OAAO,GAAIoE,EAAO,CAC9BnD,kBAAmBqH,EAAO1J,UAE9B,IVpC0C,iCUqCxC,OAAOmB,OAAOC,OAAO,GAAIoE,EAAO,CAC9BjD,kBAAmBmH,EAAO1J,UAE9B,QACE,OAAOwF,IAyCXmE,cArCkC,WAAyE,IAAxEnE,EAAuE,uDAA3C2D,GAA2BO,EAAgB,uCAC1G,OAAQA,EAAO3J,MACb,IX5D6B,oBW6D3B,OAAOoB,OAAOC,OAAO,GAAIoE,EAAO,CAC9B4D,UAAU,GAAD,oBACJ5D,EAAM4D,WADF,CAEPM,EAAO1J,YAIb,IXnEmC,0BWoEjC,IAAM4J,EAAgBpE,EAAM4D,UAAUS,WAAU,SAACC,GAAD,OAAOA,EAAEnL,KAAO+K,EAAO1J,QAAQH,UACzEkK,EAAc5I,OAAOC,OAAO,GAAIoE,EAAM4D,UAAUQ,GAAgB,CACpE3J,OAAQyJ,EAAO1J,QAAQC,SAEzB,OAAI2J,GAAiB,EACZzI,OAAOC,OAAO,GAAIoE,EAAO,CAC9B4D,UAAU,GAAD,oBACJ5D,EAAM4D,UAAUY,MAAM,EAAGJ,IADrB,CAEPG,GAFO,aAGJvE,EAAM4D,UAAUY,MAAMJ,EAAgB,OAItCpE,EAGX,QACE,OAAOA,M,8BC3EPyE,GAASC,wBAAa,CAC1BC,MAAO,OACPC,WAAW,EACXC,MAAM,IAOFC,GAJmBC,+BAAoB,GAI1BC,CAAiBC,0BAClCC,KACAT,KAGIU,GAAQC,sBAAYpB,GAAUc,IAEpCO,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,IACf,kBAAC,KAAD,CAAeI,SAAS,cACtB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SH+FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5K,MAAK,SAAA6K,GACJA,EAAaC,gBAEd1K,OAAM,SAAA2C,GACLgI,QAAQhI,MAAMA,EAAMD,a,mBIxI5B5G,EAAOC,QAAU,CAAC,iBAAmB,mCAAmC,YAAc,8BAA8B,MAAQ,wBAAwB,KAAO,uBAAuB,KAAO,uBAAuB,gBAAkB,kCAAkC,UAAY,+B","file":"static/js/main.46e51d63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorMessage\":\"UpdateContactModal_ErrorMessage__1CQbb\",\"CancelButton\":\"UpdateContactModal_CancelButton__Q1MaX\",\"AddButton\":\"UpdateContactModal_AddButton__2G1BO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorModal\":\"ErrorModalContainer_ErrorModal__3axTu\",\"Header\":\"ErrorModalContainer_Header__1ECML\"};","module.exports = __webpack_public_path__ + \"static/media/kontak-ku-logo.0e00751a.webp\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactContainer\":\"ContactDetailPage_ContactContainer__24Hyf\",\"ContactDetail\":\"ContactDetailPage_ContactDetail__11e40\",\"Logo\":\"ContactDetailPage_Logo__3V1S7\",\"Name\":\"ContactDetailPage_Name__2Zdf5\",\"Age\":\"ContactDetailPage_Age__2bdQI\",\"Buttons\":\"ContactDetailPage_Buttons__3I7kN\"};","export interface State {\r\n  data: DataState;\r\n  communication: CommunicationState;\r\n  control: ControlState;\r\n  session: SessionState;\r\n}\r\n\r\nexport interface DataState {\r\n  contacts: Contact[];\r\n}\r\n\r\nexport interface CommunicationState {\r\n  httpCalls: HttpCall[];\r\n}\r\n\r\nexport interface ControlState {\r\n  currentContact: Contact;\r\n  errorModal: ErrorModalProps;\r\n  successfulModal: SuccessfulModalProps;\r\n}\r\n\r\nexport interface SessionState {\r\n  isFetchingContact: boolean;\r\n  isStoringContact: boolean;\r\n  isUpdatingContact: boolean;\r\n  isDeletingContact: boolean;\r\n  isFetchingContactDetail: boolean;\r\n}\r\n\r\nexport interface Contact {\r\n  id?: string,\r\n  firstName: string,\r\n  lastName: string,\r\n  age: number,\r\n  photo: string\r\n}\r\n\r\nexport interface HttpCall {\r\n  id: string;\r\n  method: HttpCallMethod;\r\n  url: string;\r\n  headers?: HttpHeader;\r\n  credentials?: RequestCredentials;\r\n  mode?: RequestMode;\r\n  requestBody?: string | any;\r\n  status?: HttpCallStatus;\r\n}\r\n\r\nexport enum HttpCallMethod {\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n  GET = \"GET\",\r\n  DELETE = \"DELETE\"\r\n}\r\n\r\nexport interface HttpHeader {\r\n  [key: string]: string;\r\n}\r\n\r\nexport enum HttpCallStatus {\r\n  SENT = \"SENT\",\r\n  SUCCESSFUL = \"SUCCESSFUL\",\r\n  ERROR = \"ERROR\"\r\n}\r\n\r\nexport interface ErrorModalProps {\r\n  isOpen: boolean;\r\n  title?: string;\r\n  content?: string | JSX.Element;\r\n}\r\n\r\nexport interface SuccessfulModalProps {\r\n  isOpen: boolean;\r\n  title: string;\r\n  content: string | JSX.Element;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Loader } from \"semantic-ui-react\";\r\n\r\nconst LoadingComponent = () => {\r\n  return (\r\n    <Loader active inline='centered'/>\r\n  )\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import React from \"react\";\r\nimport { Contact } from \"../state\";\r\nimport { Button, Image, List } from 'semantic-ui-react'\r\nimport styles from './HomePage.module.css';\r\nimport logo from '../Assets/kontak-ku-logo.webp';\r\nimport LoadingComponent from \"../common/LoadingComponent\";\r\n\r\ninterface HomePageProps {\r\n  contacts: Contact[];\r\n  isFetchingContact: boolean;\r\n  handleContactClick: (contactId: string | undefined) => void;\r\n  handleAddButtonClick: () => void;\r\n}\r\n\r\nconst HomePage: React.FC<HomePageProps> = (props: HomePageProps) => {\r\n  const renderContactList = () => {\r\n    let contactList: JSX.Element[] = [];\r\n\r\n    if (props.contacts.length > 0) {\r\n      for (const contact of props.contacts) {\r\n        contactList.push(\r\n          <List.Item onClick={() => props.handleContactClick(contact.id)} key={contact.id}>\r\n            <Image avatar src={contact.photo}/>\r\n            <List.Content className={styles.Name}>\r\n              <List.Header>{contact.firstName} {contact.lastName}</List.Header>\r\n            </List.Content>\r\n          </List.Item>\r\n        )\r\n      }\r\n    } else {\r\n      contactList.push(\r\n        <div className={styles.NoContact} key={'no-contact'}>\r\n          No contact yet.\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return contactList;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.ContactContainer}>\r\n      <Image src={logo} className={styles.Logo}/>\r\n      <List selection divided verticalAlign='middle' className={styles.ContactList} size='big'>\r\n        {\r\n          props.isFetchingContact ?\r\n            <div className={styles.LoadingHomePage}>\r\n              <LoadingComponent/>\r\n            </div>\r\n            :\r\n            renderContactList()\r\n        }\r\n      </List>\r\n      <Button size='big' circular color='violet' icon='add user' className={styles.Float}\r\n              onClick={props.handleAddButtonClick}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default HomePage;\r\n","import { HttpCall, HttpCallMethod, HttpCallStatus } from \"./state\";\r\n\r\nexport const ADD_NEW_HTTP_CALL = \"ADD_NEW_HTTP_CALL\";\r\nexport const UPDATE_HTTP_CALL_STATUS = \"UPDATE_HTTP_CALL_STATUS\";\r\n\r\nexport const updateHttpCallStatus = (callId: number | string, newStatus: HttpCallStatus) => {\r\n  return {\r\n    type: UPDATE_HTTP_CALL_STATUS, payload: {\r\n      callId: callId,\r\n      status: newStatus\r\n    }\r\n  };\r\n};\r\n\r\nexport const addNewHttpCall = (httpCall: HttpCall) => {\r\n  return {\r\n    type: ADD_NEW_HTTP_CALL, payload: httpCall\r\n  };\r\n};\r\n\r\nexport const sendHttpRequest = (httpCall: HttpCall,\r\n                                nextAction: (response: Response) => void,\r\n                                errorAction?: (response: Response) => void) => {\r\n  doHttpCall(httpCall)\r\n    .then((response: Response) => {\r\n      if (!response.ok && errorAction) {\r\n        throw(response);\r\n      }\r\n      return response;\r\n    })\r\n    .then(onSuccessful(nextAction))\r\n    .catch(onFailed(errorAction));\r\n};\r\n\r\nconst doHttpCall = (httpCall: HttpCall): Promise<Response> => {\r\n  let configuration = {\r\n    method: httpCall.method,\r\n    credentials: httpCall.credentials ? httpCall.credentials : undefined\r\n  };\r\n  if (httpCall.headers) {\r\n    configuration = Object.assign({}, configuration, {\r\n      headers: httpCall.headers\r\n    });\r\n  }\r\n  if ((httpCall.method === HttpCallMethod.POST || httpCall.method === HttpCallMethod.PUT) && httpCall.requestBody) {\r\n    configuration = Object.assign({}, configuration, {\r\n      body: httpCall.requestBody\r\n    });\r\n  }\r\n  return fetch(httpCall.url, configuration);\r\n};\r\n\r\nconst onSuccessful = (processResponse: (response: Response) => void) => {\r\n  return (response: Response) => {\r\n    processResponse(response);\r\n  };\r\n};\r\n\r\nconst onFailed = (failedAction?: (errorResponse: Response) => void) => {\r\n  return (response: Response) => {\r\n    if (failedAction) {\r\n      failedAction(response);\r\n    } else {\r\n      throw(response);\r\n    }\r\n  };\r\n};\r\n","import * as uuid from \"uuid\";\r\nimport { REACT_APP_APPLICATION_BASE_URL } from \"./config\";\r\nimport { AnyAction } from \"redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { Contact, ErrorModalProps, HttpCall, HttpCallMethod, HttpCallStatus } from \"./state\";\r\nimport { addNewHttpCall, sendHttpRequest, updateHttpCallStatus } from \"./actionsHttp\";\r\nimport { UPDATE_ERROR_MODAL } from \"./actions\";\r\n\r\nexport const UPDATE_CONTACT_LIST = \"UPDATE_CONTACT_LIST\";\r\nexport const UPDATE_CURRENT_CONTACT = \"UPDATE_CURRENT_CONTACT\";\r\n\r\nexport const UPDATE_FETCHING_CONTACT_STATUS = \"UPDATE_FETCHING_CONTACT_STATUS\";\r\nexport const UPDATE_STORING_CONTACT_STATUS = \"UPDATE_STORING_CONTACT_STATUS\";\r\nexport const UPDATE_FETCHING_CONTACT_DETAIL_STATUS = \"UPDATE_FETCHING_CONTACT_DETAIL_STATUS\";\r\nexport const UPDATE_UPDATING_CONTACT_STATUS = \"UPDATE_UPDATING_CONTACT_STATUS\";\r\nexport const UPDATE_DELETING_CONTACT_STATUS = \"UPDATE_DELETING_CONTACT_STATUS\";\r\n\r\nexport const updateErrorModalStatus = (errorModal: ErrorModalProps) => {\r\n  return { type: UPDATE_ERROR_MODAL, payload: errorModal };\r\n};\r\n\r\nexport const updateContacts = (contacts: Contact[]) => {\r\n  return { type: UPDATE_CONTACT_LIST, payload: contacts };\r\n};\r\n\r\nexport const updateCurrentContact = (contactDetail: Contact) => {\r\n  return { type: UPDATE_CURRENT_CONTACT, payload: contactDetail };\r\n};\r\n\r\nexport const updateFetchingContactStatus = (isFetchingContact: boolean) => {\r\n  return {\r\n    type: UPDATE_FETCHING_CONTACT_STATUS, payload: isFetchingContact\r\n  };\r\n};\r\n\r\nexport const updateStoringContactStatus = (isStoringContact: boolean) => {\r\n  return {\r\n    type: UPDATE_STORING_CONTACT_STATUS, payload: isStoringContact\r\n  };\r\n};\r\n\r\nexport const updateFetchingContactDetailStatus = (isFetchingContactDetail: boolean) => {\r\n  return {\r\n    type: UPDATE_FETCHING_CONTACT_DETAIL_STATUS, payload: isFetchingContactDetail\r\n  };\r\n};\r\n\r\nexport const updateUpdatingContactStatus = (isUpdatingContact: boolean) => {\r\n  return {\r\n    type: UPDATE_UPDATING_CONTACT_STATUS, payload: isUpdatingContact\r\n  };\r\n};\r\n\r\nexport const updateDeletingContactDetailStatus = (isDeletingContact: boolean) => {\r\n  return {\r\n    type: UPDATE_DELETING_CONTACT_STATUS, payload: isDeletingContact\r\n  };\r\n};\r\n\r\nexport const fetchContactList = () => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact\";\r\n    const newCallId = uuid.v4();\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.GET,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to retrieve Contact List.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(updateContacts(data.data));\r\n            dispatch(updateFetchingContactStatus(false));\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateFetchingContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateFetchingContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to retrieve Contact List. Please contact developer.\";\r\n      }\r\n      dispatch(updateFetchingContactStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n    };\r\n    dispatch(updateFetchingContactStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n\r\nexport const storingContact = (firstName: string, lastName: string, age: number, photoUrl: string) => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact\";\r\n    const newCallId = uuid.v4();\r\n\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.POST,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      requestBody: JSON.stringify({\r\n        \"firstName\": firstName,\r\n        \"lastName\": lastName,\r\n        \"age\": age,\r\n        \"photo\": photoUrl\r\n      })\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to store Contact.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then(() => {\r\n            dispatch(fetchContactList());\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(updateStoringContactStatus(false));\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateStoringContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateStoringContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to add Contact List. Please contact developer.\";\r\n      }\r\n      dispatch(updateStoringContactStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n    };\r\n    dispatch(updateStoringContactStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n\r\nexport const fetchContactDetail = (contactId: string) => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact/\" + contactId;\r\n    const newCallId = uuid.v4();\r\n\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.GET,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to retrieve Contact Detail.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            dispatch(updateCurrentContact(data.data));\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(updateFetchingContactDetailStatus(false));\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateFetchingContactDetailStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateFetchingContactDetailStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to retrieve Contact Detail. Please contact developer.\";\r\n      }\r\n      dispatch(updateFetchingContactDetailStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n    };\r\n    dispatch(updateFetchingContactDetailStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n\r\nexport const editContact = (contactId: string, firstName: string, lastName: string, age: number, photoUrl: string) => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact/\" + contactId;\r\n    const newCallId = uuid.v4();\r\n\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.PUT,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      requestBody: JSON.stringify({\r\n        \"firstName\": firstName,\r\n        \"lastName\": lastName,\r\n        \"age\": age,\r\n        \"photo\": photoUrl\r\n      })\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to Edit Contact.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then(() => {\r\n            dispatch(fetchContactDetail(contactId));\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(updateUpdatingContactStatus(false));\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateUpdatingContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateUpdatingContactStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to edit Contact. Please contact developer.\";\r\n      }\r\n      dispatch(updateUpdatingContactStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n    };\r\n    dispatch(updateUpdatingContactStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n\r\nexport const deleteContact = (contactId: string, succesfulRedirection: () => void) => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    const url = REACT_APP_APPLICATION_BASE_URL + \"contact/\" + contactId;\r\n    const newCallId = uuid.v4();\r\n\r\n    const httpCall: HttpCall = {\r\n      id: newCallId,\r\n      method: HttpCallMethod.DELETE,\r\n      url: url,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    let errorModalStatus: ErrorModalProps = {\r\n      isOpen: true,\r\n      title: \"Unable to delete Contact.\"\r\n    };\r\n\r\n    const successfulAction = (response: Response) => {\r\n      if (response.body) {\r\n        response.json()\r\n          .then(() => {\r\n            dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.SUCCESSFUL));\r\n            dispatch(updateDeletingContactDetailStatus(false));\r\n            if (succesfulRedirection) {\r\n              succesfulRedirection();\r\n            }\r\n          });\r\n      }\r\n    };\r\n\r\n    const failedAction = (response: Response) => {\r\n      dispatch(updateHttpCallStatus(newCallId, HttpCallStatus.ERROR));\r\n      if (response.body) {\r\n        response.json()\r\n          .then((data) => {\r\n            errorModalStatus.content = data.message;\r\n            dispatch(updateDeletingContactDetailStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          })\r\n          .catch((error: Error) => {\r\n            errorModalStatus.content = error.message;\r\n            dispatch(updateDeletingContactDetailStatus(false));\r\n            dispatch(updateErrorModalStatus(errorModalStatus));\r\n            return;\r\n          });\r\n      } else {\r\n        errorModalStatus.content = \"Unable to delete Contact. Please contact developer.\";\r\n      }\r\n      dispatch(updateDeletingContactDetailStatus(false));\r\n      if (errorModalStatus.content) {\r\n        dispatch(updateErrorModalStatus(errorModalStatus));\r\n      }\r\n      if (succesfulRedirection) {\r\n        succesfulRedirection();\r\n      }\r\n    };\r\n    dispatch(updateDeletingContactDetailStatus(true));\r\n    sendHttpRequest(httpCall, successfulAction, failedAction);\r\n    const httpCallSent = Object.assign({}, httpCall, {\r\n      status: HttpCallStatus.SENT\r\n    });\r\n    dispatch(addNewHttpCall(httpCallSent));\r\n  };\r\n};\r\n","import { ErrorModalProps } from \"./state\";\r\n\r\nexport const UPDATE_ERROR_MODAL = \"UPDATE_ERROR_MODAL\";\r\n\r\nexport const updateErrorModalStatus = (errorModal: ErrorModalProps) => {\r\n  return { type: UPDATE_ERROR_MODAL, payload: errorModal };\r\n};\r\n","import React, { FormEvent } from \"react\";\r\nimport { Button, Form, Modal } from \"semantic-ui-react\";\r\nimport styles from \"./UpdateContactModal.module.css\";\r\n\r\ninterface AddContactModalProps {\r\n  updateContactModalOpen: boolean;\r\n  updateActionType: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  age: number;\r\n  photoUrl: string;\r\n  errorMessage: string;\r\n  isUpdatingContact: boolean;\r\n  handleFirstNameChange: (event: FormEvent<HTMLInputElement>) => void;\r\n  handleLastNameChange: (event: FormEvent<HTMLInputElement>) => void;\r\n  handleAgeChange: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  handlePhotoUrlChange: (event: FormEvent<HTMLInputElement>) => void;\r\n  handleCancelButtonClick: () => void;\r\n  handleUpdateContactButtonClick: () => void;\r\n}\r\n\r\nconst UpdateContactModal: React.FC<AddContactModalProps> = (props: AddContactModalProps) => {\r\n  return (\r\n    <Modal open={props.updateContactModalOpen} size=\"tiny\">\r\n      <Modal.Header>\r\n        {props.updateActionType} New Contact\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Form>\r\n          <Form.Input fluid\r\n                      label='First Name'\r\n                      placeholder='First Name'\r\n                      value={props.firstName}\r\n                      onChange={props.handleFirstNameChange}\r\n          />\r\n          <Form.Input fluid\r\n                      label='Last Name'\r\n                      placeholder='Last Name'\r\n                      value={props.lastName}\r\n                      onChange={props.handleLastNameChange}\r\n          />\r\n          <Form.Input fluid\r\n                      label='Age'\r\n                      placeholder='Age'\r\n                      type='number'\r\n                      min='1'\r\n                      value={props.age}\r\n                      onChange={props.handleAgeChange}\r\n          />\r\n          <Form.Input fluid\r\n                      label='Photo (URL)'\r\n                      placeholder='Last Name'\r\n                      value={props.photoUrl}\r\n                      onChange={props.handlePhotoUrlChange}\r\n          />\r\n          <span className={styles.ErrorMessage}>{props.errorMessage}</span>\r\n        </Form>\r\n\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color=\"red\" onClick={props.handleCancelButtonClick} className={styles.CancelButton}>\r\n          Cancel\r\n        </Button>\r\n        <Button color=\"violet\" onClick={props.handleUpdateContactButtonClick} className={styles.AddButton}\r\n                loading={props.isUpdatingContact}>\r\n          {props.updateActionType}\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n};\r\n\r\nexport default UpdateContactModal;\r\n","import React, { FormEvent, useCallback, useEffect, useState } from \"react\";\r\nimport { useHistory } from 'react-router';\r\nimport HomePage from \"../Components/HomePage\";\r\nimport { fetchContactList, storingContact } from \"../actionsContact\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Contact, State } from \"../state\";\r\nimport UpdateContactModal from \"../modals/UpdateContactModal\";\r\n\r\nconst mapStateToProps = (state: State) => {\r\n  return {\r\n    contacts: state.data.contacts,\r\n    isFetchingContact: state.session.isFetchingContact,\r\n    isStoringContact: state.session.isStoringContact\r\n  };\r\n};\r\n\r\ninterface HomePageContainerProps {\r\n  contacts: Contact[];\r\n  isFetchingContact: boolean;\r\n  isStoringContact: boolean;\r\n}\r\n\r\nconst HomePageContainer: React.FC<HomePageContainerProps> = (props: HomePageContainerProps) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const contacts = props.contacts;\r\n  const isFetchingContact = props.isFetchingContact;\r\n  const isStoringContact = props.isStoringContact;\r\n\r\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [age, setAge] = useState(1);\r\n  const [photoUrl, setPhotoUrl] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContactList());\r\n  }, [dispatch]);\r\n\r\n  const handleFirstNameChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setFirstName(event.currentTarget.value);\r\n  };\r\n\r\n  const handleLastNameChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setLastName(event.currentTarget.value);\r\n  };\r\n\r\n  const handleAgeChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setAge(Number(event.currentTarget.value));\r\n  };\r\n\r\n  const handlePhotoUrlChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setPhotoUrl(event.currentTarget.value);\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  const handleContactClick = (contactId: string | undefined) => {\r\n    if (contactId) {\r\n      history.push(\"/\".concat(contactId));\r\n    }\r\n  };\r\n\r\n  const handleAddButtonClick = () => {\r\n    setIsAddContactModalOpen(true);\r\n  };\r\n\r\n  const handleAddContactButtonClick = useCallback(\r\n    () => {\r\n      if (firstName.length < 3) {\r\n        setErrorMessage('First Name length must be at least 3 characters long.');\r\n      } else if (lastName.length < 3) {\r\n        setErrorMessage('Last Name length must be at least 3 characters long.');\r\n      } else if (!(/^(?!-)(?!.*-)[A-Za-z0-9-]+(?<!-)$/.test(firstName))) {\r\n        setErrorMessage('First Name must only contain alpha-numeric characters.');\r\n      } else if (!(/^(?!-)(?!.*-)[A-Za-z0-9-]+(?<!-)$/.test(lastName))) {\r\n        setErrorMessage('Last Name must only contain alpha-numeric characters.');\r\n      } else if (age < 1 || age > 200) {\r\n        setErrorMessage('Age must be at least 1 and not larger than 200.');\r\n      } else if (photoUrl.length === 0) {\r\n        setErrorMessage('Photo (URL) is not allowed to be empty.');\r\n      } else {\r\n        dispatch(storingContact(firstName, lastName, age, photoUrl));\r\n        setIsAddContactModalOpen(false);\r\n      }\r\n    },\r\n    [dispatch, firstName, lastName, age, photoUrl]\r\n  );\r\n\r\n  const handleCancelButtonClick = () => {\r\n    setIsAddContactModalOpen(false)\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <HomePage contacts={contacts}\r\n                isFetchingContact={isFetchingContact}\r\n                handleContactClick={handleContactClick}\r\n                handleAddButtonClick={handleAddButtonClick}\r\n      />\r\n      <UpdateContactModal updateContactModalOpen={isAddContactModalOpen}\r\n                          updateActionType={'Add'}\r\n                          firstName={firstName}\r\n                          lastName={lastName}\r\n                          age={age}\r\n                          photoUrl={photoUrl}\r\n                          errorMessage={errorMessage}\r\n                          isUpdatingContact={isStoringContact}\r\n                          handleFirstNameChange={handleFirstNameChange}\r\n                          handleLastNameChange={handleLastNameChange}\r\n                          handleAgeChange={handleAgeChange}\r\n                          handlePhotoUrlChange={handlePhotoUrlChange}\r\n                          handleCancelButtonClick={handleCancelButtonClick}\r\n                          handleUpdateContactButtonClick={handleAddContactButtonClick}/>\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default connect(mapStateToProps)(HomePageContainer);\r\n","import React from \"react\";\r\nimport { Button, Header, Modal } from \"semantic-ui-react\";\r\nimport { State } from \"../state\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { updateErrorModalStatus } from \"../actions\";\r\nimport styles from  \"./ErrorModalContainer.module.css\";\r\n\r\ninterface ErrorModalProps {\r\n  dispatch: Dispatch;\r\n  isOpen: boolean;\r\n  title?: string;\r\n  content?: string | JSX.Element;\r\n}\r\n\r\nconst mapStateToProps = (state: State) => {\r\n  return {\r\n    isOpen: state.control.errorModal.isOpen,\r\n    title: state.control.errorModal.title,\r\n    content: state.control.errorModal.content\r\n  };\r\n};\r\n\r\nconst ErrorModalContainer: React.FC<ErrorModalProps> = (props: ErrorModalProps) => {\r\n  const handleCloseErrorModal = () => {\r\n    props.dispatch(updateErrorModalStatus({\r\n      title: \"\",\r\n      content: \"\",\r\n      isOpen: false\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={props.isOpen}\r\n      onClose={handleCloseErrorModal}\r\n      size='small'\r\n      className={styles.ErrorModal}\r\n    >\r\n      <Header icon='close' content={props.title ? props.title : \"Error\"} className={styles.Header}/>\r\n      <Modal.Content>\r\n        {props.content ? props.content : \"There is an error in the current operation. Please refresh your browser and try again.\"}\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button negative onClick={handleCloseErrorModal}>\r\n          Close\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(ErrorModalContainer);\r\n","import React from 'react';\r\nimport { Contact } from \"../state\";\r\nimport { Button, Image } from \"semantic-ui-react\";\r\nimport styles from './ContactDetailPage.module.css';\r\nimport LoadingComponent from \"../common/LoadingComponent\";\r\n\r\ninterface ContactDetailPageProps {\r\n  currentContact: Contact;\r\n  isFetchingContactDetail: boolean;\r\n  isDeletingContact: boolean;\r\n  handleButtonBackClick: () => void;\r\n  HandleButtonEditClick: () => void;\r\n  handleButtonDeleteClick: () => void;\r\n}\r\n\r\nconst ContactDetailPage: React.FC<ContactDetailPageProps> = (props: ContactDetailPageProps) => {\r\n  return(\r\n    <div className={styles.ContactContainer}>\r\n      {\r\n        props.isFetchingContactDetail ?\r\n          <LoadingComponent/>\r\n          :\r\n          <div className={styles.ContactDetail}>\r\n            <Image src={props.currentContact.photo} className={styles.Logo}/>\r\n            <span className={styles.Name}>{props.currentContact.firstName.concat(' ').concat(props.currentContact.lastName)}</span>\r\n            <span className={styles.Age}>{props.currentContact.age} years old</span>\r\n            <div className={styles.Buttons}>\r\n              <Button size='big' className={styles.Button} color=\"blue\" circular icon='chevron left' onClick={props.handleButtonBackClick}/>\r\n              <Button size='big' className={styles.Button} color=\"orange\" circular icon='edit' onClick={props.HandleButtonEditClick}/>\r\n              <Button loading={props.isDeletingContact} size='big' className={styles.Button} color=\"red\" circular icon='trash' onClick={props.handleButtonDeleteClick}/>\r\n            </div>\r\n          </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ContactDetailPage;\r\n","import React, { FormEvent, useCallback, useEffect, useState } from 'react';\r\nimport ContactDetailPage from \"../Components/ContactDetailPage\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { deleteContact, editContact, fetchContactDetail } from \"../actionsContact\";\r\nimport { RouteComponentProps, useHistory } from \"react-router\";\r\nimport { Contact, State } from \"../state\";\r\nimport UpdateContactModal from \"../modals/UpdateContactModal\";\r\n\r\nconst mapStateToProps = (state: State) => {\r\n  return {\r\n    currentContact: state.control.currentContact,\r\n    isFetchingContactDetail: state.session.isFetchingContactDetail,\r\n    isUpdatingContact: state.session.isUpdatingContact,\r\n    isDeletingContact: state.session.isDeletingContact\r\n  }\r\n};\r\n\r\nexport interface ContactDetailPageContainerProps extends RouteComponentProps<any> {\r\n  currentContact: Contact;\r\n  isFetchingContactDetail: boolean;\r\n  isUpdatingContact: boolean;\r\n  isDeletingContact: boolean;\r\n}\r\n\r\nconst ContactDetailPageContainer: React.FC<ContactDetailPageContainerProps> = (props: ContactDetailPageContainerProps) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const urlParams = props.match.params;\r\n  const contactIdParam = urlParams.contactId;\r\n\r\n  const currentContact = props.currentContact;\r\n  const isFetchingContactDetail = props.isFetchingContactDetail;\r\n  const isUpdatingContact = props.isUpdatingContact;\r\n  const isDeletingContact = props.isDeletingContact;\r\n\r\n  const [isEditContactModalOpen, setIsEditContactModalOpen] = useState(false);\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [age, setAge] = useState(1);\r\n  const [photoUrl, setPhotoUrl] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContactDetail(contactIdParam));\r\n  }, [dispatch, contactIdParam]);\r\n\r\n  useEffect(() => {\r\n    setFirstName(currentContact.firstName);\r\n    setLastName(currentContact.lastName);\r\n    setAge(currentContact.age);\r\n    setPhotoUrl(currentContact.photo);\r\n  }, [currentContact]);\r\n\r\n  const handleButtonBackClick = () => {\r\n    history.push('/')\r\n  };\r\n\r\n  const HandleButtonEditClick = () => {\r\n    setIsEditContactModalOpen(true)\r\n  };\r\n\r\n  const handleFirstNameChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setFirstName(event.currentTarget.value);\r\n  };\r\n\r\n  const handleLastNameChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setLastName(event.currentTarget.value);\r\n  };\r\n\r\n  const handleAgeChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setAge(Number(event.currentTarget.value));\r\n  };\r\n\r\n  const handlePhotoUrlChange = (event: FormEvent<HTMLInputElement>) => {\r\n    setPhotoUrl(event.currentTarget.value);\r\n  };\r\n\r\n  const handleEditContactButtonClick = useCallback(\r\n    () => {\r\n      if (firstName.length < 3) {\r\n        setErrorMessage('First Name length must be at least 3 characters long.');\r\n      } else if (lastName.length < 3) {\r\n        setErrorMessage('Last Name length must be at least 3 characters long.');\r\n      } else if (!(/^(?!-)(?!.*-)[A-Za-z0-9-]+(?<!-)$/.test(firstName))) {\r\n        setErrorMessage('First Name must only contain alpha-numeric characters.');\r\n      } else if (!(/^(?!-)(?!.*-)[A-Za-z0-9-]+(?<!-)$/.test(lastName))) {\r\n        setErrorMessage('Last Name must only contain alpha-numeric characters.');\r\n      } else if (age < 1 || age > 100) {\r\n        setErrorMessage('Age must be at least 1 and not larger than 100');\r\n      } else if (photoUrl.length === 0) {\r\n        setErrorMessage('Photo (URL) is not allowed to be empty.');\r\n      } else {\r\n        dispatch(editContact(contactIdParam, firstName, lastName, age, photoUrl));\r\n        setIsEditContactModalOpen(false);\r\n      }\r\n    },\r\n    [dispatch, firstName, lastName, age, photoUrl, contactIdParam]\r\n  );\r\n\r\n  const handleCancelButtonClick = () => {\r\n    setIsEditContactModalOpen(false);\r\n  };\r\n\r\n  const succesfulRedirection = useCallback(\r\n    () => {\r\n      history.push('/');\r\n    }, [history]\r\n  );\r\n\r\n  const handleButtonDeleteClick = useCallback(\r\n    () => {\r\n      dispatch(deleteContact(contactIdParam, succesfulRedirection));\r\n    }, [dispatch, contactIdParam, succesfulRedirection]\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ContactDetailPage currentContact={currentContact}\r\n                         isFetchingContactDetail={isFetchingContactDetail}\r\n                         isDeletingContact={isDeletingContact}\r\n                         handleButtonBackClick={handleButtonBackClick}\r\n                         HandleButtonEditClick={HandleButtonEditClick}\r\n                         handleButtonDeleteClick={handleButtonDeleteClick}\r\n      />\r\n      <UpdateContactModal updateContactModalOpen={isEditContactModalOpen}\r\n                          updateActionType={'Edit'}\r\n                          firstName={firstName}\r\n                          lastName={lastName}\r\n                          age={age}\r\n                          photoUrl={photoUrl}\r\n                          errorMessage={errorMessage}\r\n                          isUpdatingContact={isUpdatingContact}\r\n                          handleFirstNameChange={handleFirstNameChange}\r\n                          handleLastNameChange={handleLastNameChange}\r\n                          handleAgeChange={handleAgeChange}\r\n                          handlePhotoUrlChange={handlePhotoUrlChange}\r\n                          handleCancelButtonClick={handleCancelButtonClick}\r\n                          handleUpdateContactButtonClick={handleEditContactButtonClick}/>\r\n      )\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactDetailPageContainer);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport HomePageContainer from \"../Containers/HomePageContainer\";\r\nimport ErrorModalContainer from \"../Containers/ErrorModalContainer\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport ContactDetailPageContainer from \"../Containers/ContactDetailPageContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePageContainer}/>\r\n        <Route exact path=\"/:contactId\" component={ContactDetailPageContainer}/>\r\n      </Switch>\r\n      <ErrorModalContainer/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { DataState, CommunicationState, ControlState, SessionState } from \"./state\";\r\n\r\nexport const initialDataState: DataState = {\r\n  contacts: []\r\n};\r\n\r\nexport const initialCommunicationState: CommunicationState = {\r\n  httpCalls: []\r\n};\r\n\r\nexport const initialControlState: ControlState = {\r\n  currentContact: {\r\n    id: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    age: 0,\r\n    photo: \"\"\r\n  },\r\n  errorModal: {\r\n    isOpen: false\r\n  },\r\n  successfulModal: {\r\n    isOpen: false,\r\n    title: \"\",\r\n    content: \"\"\r\n  }\r\n};\r\n\r\nexport const initialSessionState: SessionState = {\r\n  isFetchingContact: false,\r\n  isStoringContact: false,\r\n  isUpdatingContact: false,\r\n  isDeletingContact: false,\r\n  isFetchingContactDetail: false\r\n};\r\n","import { CommunicationState, ControlState, DataState, SessionState, State } from \"./state\";\r\nimport { combineReducers } from \"redux\";\r\nimport { initialCommunicationState, initialControlState, initialDataState, initialSessionState } from \"./initialStates\";\r\nimport * as actionsContact from \"./actionsContact\";\r\nimport * as actionsHttp from \"./actionsHttp\";\r\nimport * as actions from \"./actions\";\r\n\r\nexport const dataReducer = (state: DataState = initialDataState, action: any) => {\r\n  switch (action.type) {\r\n    case actionsContact.UPDATE_CONTACT_LIST:\r\n      return Object.assign({}, state, {\r\n        contacts: action.payload\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const controlReducer = (state: ControlState = initialControlState, action: any) => {\r\n  switch (action.type) {\r\n    case actions.UPDATE_ERROR_MODAL:\r\n      return Object.assign({}, state, {\r\n        errorModal: action.payload\r\n      });\r\n    case actionsContact.UPDATE_CURRENT_CONTACT:\r\n      return Object.assign({}, state, {\r\n        currentContact: action.payload\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const sessionReducer = (state: SessionState = initialSessionState, action: any) => {\r\n  switch (action.type) {\r\n    case actionsContact.UPDATE_FETCHING_CONTACT_STATUS:\r\n      return Object.assign({}, state, {\r\n        isFetchingContact: action.payload\r\n      });\r\n    case actionsContact.UPDATE_STORING_CONTACT_STATUS:\r\n      return Object.assign({}, state, {\r\n        isStoringContact: action.payload\r\n      });\r\n    case actionsContact.UPDATE_FETCHING_CONTACT_DETAIL_STATUS:\r\n      return Object.assign({}, state, {\r\n        isFetchingContactDetail: action.payload\r\n      });\r\n    case actionsContact.UPDATE_UPDATING_CONTACT_STATUS:\r\n      return Object.assign({}, state, {\r\n        isUpdatingContact: action.payload\r\n      });\r\n    case actionsContact.UPDATE_DELETING_CONTACT_STATUS:\r\n      return Object.assign({}, state, {\r\n        isDeletingContact: action.payload\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const communicationReducer = (state: CommunicationState = initialCommunicationState, action: any) => {\r\n  switch (action.type) {\r\n    case actionsHttp.ADD_NEW_HTTP_CALL: {\r\n      return Object.assign({}, state, {\r\n        httpCalls: [\r\n          ...state.httpCalls,\r\n          action.payload\r\n        ]\r\n      });\r\n    }\r\n    case actionsHttp.UPDATE_HTTP_CALL_STATUS: {\r\n      const httpCallIndex = state.httpCalls.findIndex((x) => x.id === action.payload.callId);\r\n      const newHttpCall = Object.assign({}, state.httpCalls[httpCallIndex], {\r\n        status: action.payload.status\r\n      });\r\n      if (httpCallIndex >= 0) {\r\n        return Object.assign({}, state, {\r\n          httpCalls: [\r\n            ...state.httpCalls.slice(0, httpCallIndex),\r\n            newHttpCall,\r\n            ...state.httpCalls.slice(httpCallIndex + 1)\r\n          ]\r\n        });\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport const reducers = combineReducers<State>({\r\n  data: dataReducer,\r\n  control: controlReducer,\r\n  session: sessionReducer,\r\n  communication: communicationReducer\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { reducers } from \"./reducers\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst logger = createLogger({\r\n  level: \"info\",\r\n  collapsed: true,\r\n  diff: true\r\n});\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n});\r\n\r\nconst middleware = composeEnhancers(applyMiddleware(\r\n  thunkMiddleware,\r\n  logger\r\n));\r\n\r\nconst store = createStore(reducers, middleware);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter basename=\"/kontak-ku\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactContainer\":\"HomePage_ContactContainer__20juu\",\"ContactList\":\"HomePage_ContactList__2BMz8\",\"Float\":\"HomePage_Float__33wnm\",\"Name\":\"HomePage_Name__vhNsU\",\"Logo\":\"HomePage_Logo__1ob_u\",\"LoadingHomePage\":\"HomePage_LoadingHomePage__1b-N_\",\"NoContact\":\"HomePage_NoContact__38uR0\"};"],"sourceRoot":""}